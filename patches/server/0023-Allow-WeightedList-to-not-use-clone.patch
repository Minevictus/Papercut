From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mariell Hoversholm <proximyst@proximyst.com>
Date: Wed, 8 Jul 2020 18:29:45 +0200
Subject: [PATCH] Allow WeightedList to not use clone

---
 .../java/net/minecraft/server/BehaviorGate.java  |  7 +++----
 .../java/net/minecraft/server/WeightedList.java  | 16 +++++++++++-----
 2 files changed, 14 insertions(+), 9 deletions(-)

diff --git a/src/main/java/net/minecraft/server/BehaviorGate.java b/src/main/java/net/minecraft/server/BehaviorGate.java
index 4a5b54b44958b7eddaf2cd7bd517647cca96fd62..46e910581210421c8699637431804dc2f43eb4a6 100644
--- a/src/main/java/net/minecraft/server/BehaviorGate.java
+++ b/src/main/java/net/minecraft/server/BehaviorGate.java
@@ -12,7 +12,7 @@ public class BehaviorGate<E extends EntityLiving> extends Behavior<E> {
     private final Set<MemoryModuleType<?>> b;
     private final BehaviorGate.Order c;
     private final BehaviorGate.Execution d;
-    private final WeightedList<Behavior<? super E>> e = new WeightedList<>();
+    private final WeightedList<Behavior<? super E>> e = new WeightedList<>(false); // Paper - don't use a clone
 
     public BehaviorGate(Map<MemoryModuleType<?>, MemoryStatus> map, Set<MemoryModuleType<?>> set, BehaviorGate.Order behaviorgate_order, BehaviorGate.Execution behaviorgate_execution, List<Pair<Behavior<? super E>, Integer>> list) {
         super(map);
@@ -60,10 +60,9 @@ public class BehaviorGate<E extends EntityLiving> extends Behavior<E> {
         }).forEach((behavior) -> {
             behavior.g(worldserver, e0, i);
         });
-        Set set = this.b;
         BehaviorController behaviorcontroller = e0.getBehaviorController();
 
-        set.forEach(behaviorcontroller::removeMemory);
+        this.b.forEach(behaviorcontroller::removeMemory); // Paper - decomp fix
     }
 
     @Override
@@ -110,7 +109,7 @@ public class BehaviorGate<E extends EntityLiving> extends Behavior<E> {
 
         private final Consumer<WeightedList<?>> c;
 
-        private Order(Consumer consumer) {
+        private Order(Consumer<WeightedList<?>> consumer) { // Paper - decomp fix
             this.c = consumer;
         }
 
diff --git a/src/main/java/net/minecraft/server/WeightedList.java b/src/main/java/net/minecraft/server/WeightedList.java
index b4e871140e7a0ab5e402e415ea4ff04605157d54..031f59d4795e6e79356edae03903c6942381bc71 100644
--- a/src/main/java/net/minecraft/server/WeightedList.java
+++ b/src/main/java/net/minecraft/server/WeightedList.java
@@ -16,12 +16,18 @@ public class WeightedList<U> {
 
     protected final List<WeightedList.a<U>> list; // Paper - decompile conflict
     private final Random b;
+    private final boolean useClone; // Paper
 
-    public WeightedList() {
-        this(Lists.newArrayList());
+    // Paper start - add useClone option
+    public WeightedList() { this(true); }
+    public WeightedList(boolean useClone) {
+        this(Lists.newArrayList(), useClone);
     }
 
-    private WeightedList(List<WeightedList.a<U>> list) {
+    private WeightedList(List<WeightedList.a<U>> list) { this(list, true); }
+    private WeightedList(List<WeightedList.a<U>> list, boolean useClone) {
+        this.useClone = useClone;
+        // Paper end
         this.b = new Random();
         this.list = Lists.newArrayList(list); // Paper - decompile conflict
     }
@@ -43,10 +49,10 @@ public class WeightedList<U> {
 
     public WeightedList<U> a(Random random) {
         // Paper start - make concurrent safe, work off a clone of the list
-        java.util.ArrayList<WeightedList.a<U>> list = new java.util.ArrayList<WeightedList.a<U>>(this.list);
+        List<WeightedList.a<U>> list = useClone ? new java.util.ArrayList<WeightedList.a<U>>(this.list) : this.list;
         list.forEach((weightedlist_a) -> weightedlist_a.a(random.nextFloat()));
         list.sort(Comparator.comparingDouble(a::c));
-        return new WeightedList<>(list);
+        return useClone ? new WeightedList<>(list, useClone) : this;
         // Paper end
     }
 
