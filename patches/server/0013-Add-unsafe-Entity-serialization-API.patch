From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mariell Hoversholm <proximyst@proximyst.com>
Date: Sat, 27 Jun 2020 16:31:37 +0200
Subject: [PATCH] Add unsafe Entity serialization API

---
 .../java/net/minecraft/server/Entity.java     |  9 +++++++
 .../net/minecraft/server/EntityTypes.java     |  1 +
 .../craftbukkit/entity/CraftEntity.java       |  8 ++++++
 .../craftbukkit/util/CraftMagicNumbers.java   | 25 +++++++++++++++++++
 4 files changed, 43 insertions(+)

diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 903e22b86ead1194ffe185cc408f6c8ac42f3dd2..91ac50787215aefdd4db113e750b0e0a3c0ba3eb 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -1554,6 +1554,15 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         }
     }
 
+    // Paper start - entity serialization api
+    public boolean serializeEntity(NBTTagCompound compound) {
+        List<Entity> pass = new java.util.ArrayList<>(passengers);
+        passengers.clear();
+        boolean result = d(compound); // Obf helper?
+        passengers.addAll(pass);
+        return result;
+    }
+    // Paper end
     public boolean d(NBTTagCompound nbttagcompound) {
         return this.isPassenger() ? false : this.a_(nbttagcompound);
     }
diff --git a/src/main/java/net/minecraft/server/EntityTypes.java b/src/main/java/net/minecraft/server/EntityTypes.java
index 18a806ebbf092b904983691529ce5edf2da4e6db..34c3a4ff30d98675df4bb008825fd12f998e614a 100644
--- a/src/main/java/net/minecraft/server/EntityTypes.java
+++ b/src/main/java/net/minecraft/server/EntityTypes.java
@@ -313,6 +313,7 @@ public class EntityTypes<T extends Entity> {
         return this.be.create(this, world);
     }
 
+    public static Optional<Entity> loadEntityFixedData(NBTTagCompound nbttagcompound, World world) { return a(nbttagcompound, world); } // Papercut - OBFHELPER
     public static Optional<Entity> a(NBTTagCompound nbttagcompound, World world) {
         return SystemUtils.a(a(nbttagcompound).map((entitytypes) -> {
             return entitytypes.a(world);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index c8f41deb599c86d9b41c0aa2d9959fdf9816c61c..6a4e8043ac6a462f9e0051b6e3d6aafdb7557f09 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -156,6 +156,7 @@ import org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.craftbukkit.util.CraftVector;
 import org.bukkit.entity.Pose;
+import org.bukkit.event.entity.CreatureSpawnEvent; // Papercut
 import org.bukkit.event.entity.EntityDamageEvent;
 import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 import org.bukkit.metadata.MetadataValue;
@@ -1093,5 +1094,12 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     public void setRawInvulnerable(boolean invulnerability) {
         getHandle().setInvulnerable(invulnerability);
     }
+
+    @Override
+    public boolean spawnAt(Location location, CreatureSpawnEvent.SpawnReason spawnReason) {
+        entity.world = ((CraftWorld) location.getWorld()).getHandle();
+        entity.setLocation(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
+        return !entity.valid && entity.world.addEntity(entity, spawnReason);
+    }
     // Papercut end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 461cfb96f496aaf5caa12d8ae9847c8756b711e7..8d47aac6ce67255a4cd38e2966327b9bdbc93ee9 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -35,15 +35,20 @@ import net.minecraft.server.NBTBase;
 import net.minecraft.server.NBTTagCompound;
 import net.minecraft.server.SavedFile;
 import net.minecraft.server.SharedConstants;
+import net.minecraft.server.EntityTypes; // Papercut
 import org.bukkit.Bukkit;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
 import org.bukkit.UnsafeValues;
+import org.bukkit.World; // Papercut
 import org.bukkit.advancement.Advancement;
 import org.bukkit.block.data.BlockData;
+import org.bukkit.craftbukkit.CraftWorld; // Papercut
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.bukkit.craftbukkit.entity.CraftEntity; // Papercut
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.legacy.CraftLegacy;
+import org.bukkit.entity.Entity; // Papercut
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.material.MaterialData;
 import org.bukkit.plugin.InvalidPluginException;
@@ -391,6 +396,26 @@ public final class CraftMagicNumbers implements UnsafeValues {
     }
     // Paper end
 
+    // Papercut start
+    @Override
+    public byte[] serializeEntity(Entity entity) {
+        Preconditions.checkNotNull(entity, "null cannot be serialized");
+        Preconditions.checkArgument(entity instanceof CraftEntity, "non-CraftEntity cannot be serialized");
+        return serializeNbtToBytes(((CraftEntity) entity).getHandle().save(new NBTTagCompound()), true);
+    }
+
+    @Override
+    public Entity deserializeEntity(byte[] data, World world) {
+        NBTTagCompound compound = deserializeNbtFromBytes(data, true);
+        Dynamic<NBTBase> converted = DataConverterRegistry.getDataFixer().update(DataConverterTypes.ENTITY, new Dynamic<>(DynamicOpsNBT.a, compound), compound.getInt("DataVersion"), getDataVersion());
+        compound = (NBTTagCompound) converted.getValue();
+        compound.remove("UUID"); // Make the server make a new UUID for the entity; makes entities always spawnable.
+        net.minecraft.server.Entity entity = EntityTypes.loadEntityFixedData(compound, ((CraftWorld) world).getHandle())
+            .orElseThrow(() -> new IllegalArgumentException("unknown ID was found for the data; did you downgrade?"));
+        return entity.getBukkitEntity();
+    }
+    // Papercut end
+
     /**
      * This helper class represents the different NBT Tags.
      * <p>
