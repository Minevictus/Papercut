From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mariell Hoversholm <proximyst@proximyst.com>
Date: Tue, 26 May 2020 22:20:23 +0200
Subject: [PATCH] Apply advancements async

---
 .../server/AdvancementDataPlayer.java         |  1 +
 .../net/minecraft/server/EntityPlayer.java    | 13 +++--
 .../minecraft/server/PlayerConnection.java    |  5 +-
 .../java/net/minecraft/server/PlayerList.java | 53 ++++++++++++++++---
 4 files changed, 60 insertions(+), 12 deletions(-)

diff --git a/src/main/java/net/minecraft/server/AdvancementDataPlayer.java b/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
index d3387a4e16f81b820d40502d2c46ebb3db88f824..ed0e4ae0f29871968772ee0c8e7b38ed47a0ab15 100644
--- a/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
+++ b/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
@@ -59,6 +59,7 @@ public class AdvancementDataPlayer {
         this.d(advancementdataworld);
     }
 
+    public void setPlayer(EntityPlayer entityplayer) { a(entityplayer); } // Papercut - OBFHELPER
     public void a(EntityPlayer entityplayer) {
         this.player = entityplayer;
     }
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 8fd3c913ac5315a5c1cce002498bfe2ec08aaf42..ff16b5acedb599b13cb87c8fc38609b1f5e9ac0c 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -47,7 +47,6 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     public final MinecraftServer server;
     public final PlayerInteractManager playerInteractManager;
     public final Deque<Integer> removeQueue = new ArrayDeque<>(); // Paper
-    private final AdvancementDataPlayer advancementDataPlayer;
     private final ServerStatisticManager serverStatisticManager;
     private float lastHealthScored = Float.MIN_VALUE;
     private int lastFoodScored = Integer.MIN_VALUE;
@@ -130,7 +129,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         this.playerInteractManager = playerinteractmanager;
         this.server = minecraftserver;
         this.serverStatisticManager = minecraftserver.getPlayerList().getStatisticManager(this);
-        this.advancementDataPlayer = minecraftserver.getPlayerList().f(this);
+//        this.advancementDataPlayer = minecraftserver.getPlayerList().f(this); // Papercut
         this.G = 1.0F;
         //this.b(worldserver); // Paper - don't move to spawn on login, only first join
 
@@ -494,7 +493,8 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             CriterionTriggers.u.a(this, this.cm, this.ticksLived - this.cn);
         }
 
-        this.advancementDataPlayer.b(this);
+        if (isAdvancementDataLoaded()) // Papercut - async advancement loading
+            getAdvancementData().b(this); // Papercut - async advancement loading
     }
 
     public void playerTick() {
@@ -1887,8 +1887,13 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     }
 
     public AdvancementDataPlayer getAdvancementData() {
-        return this.advancementDataPlayer;
+        // Papercut start
+        if (this.playerConnection.advancementDataPlayer == null)
+            this.playerConnection.advancementDataPlayer = server.getPlayerList().applyPlayerAdvancementsAsync(this);
+        return this.playerConnection.advancementDataPlayer.join();
+        // Papercut end
     }
+    public boolean isAdvancementDataLoaded() { return this.playerConnection != null && this.playerConnection.advancementDataPlayer != null && this.playerConnection.advancementDataPlayer.isDone(); } // Papercut - async advancements loading
 
     // CraftBukkit start
     public void a(WorldServer worldserver, double d0, double d1, double d2, float f, float f1) {
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 37f55c66b6cbca9650b050fe08f60c101c2d35bf..9a7720539eef44cbcf962e47ffbf764a54ab6371 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -106,6 +106,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
     private int processedMovePackets;
     private static final int MAX_SIGN_LINE_LENGTH = Integer.getInteger("Paper.maxSignLength", 80);
     private static final long KEEPALIVE_LIMIT = Long.getLong("paper.playerconnection.keepalive", 30) * 1000; // Paper - provide property to set keepalive limit
+    java.util.concurrent.CompletableFuture<AdvancementDataPlayer> advancementDataPlayer = null; // Papercut - async player advancements loading
 
     public PlayerConnection(MinecraftServer minecraftserver, NetworkManager networkmanager, EntityPlayer entityplayer) {
         this.minecraftServer = minecraftserver;
@@ -547,8 +548,8 @@ public class PlayerConnection implements PacketListenerPlayIn {
             MinecraftKey minecraftkey = packetplayinadvancements.d();
             Advancement advancement = this.minecraftServer.getAdvancementData().a(minecraftkey);
 
-            if (advancement != null) {
-                this.player.getAdvancementData().a(advancement);
+            if (advancement != null && this.player.isAdvancementDataLoaded()) { // Papercut - async advancements
+                player.getAdvancementData().a(advancement); // Papercut
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 3c2f1f140c3991195bb8147bd65d9cd16a8fd3da..ba4d217b4de56ff74ffe1b9a3bc66291da5d7a44 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -181,6 +181,7 @@ public abstract class PlayerList {
 
         this.a(entityplayer, (EntityPlayer) null, worldserver1);
         PlayerConnection playerconnection = new PlayerConnection(this.server, networkmanager, entityplayer);
+        if (playerconnection.advancementDataPlayer == null) playerconnection.advancementDataPlayer = applyPlayerAdvancementsAsync(entityplayer); // Papercut - async advancements loading
         GameRules gamerules = worldserver1.getGameRules();
         boolean flag = gamerules.getBoolean(GameRules.DO_IMMEDIATE_RESPAWN);
         boolean flag1 = gamerules.getBoolean(GameRules.REDUCED_DEBUG_INFO);
@@ -491,8 +492,8 @@ public abstract class PlayerList {
 
         AdvancementDataPlayer advancementdataplayer = (AdvancementDataPlayer) entityplayer.getAdvancementData(); // CraftBukkit
 
-        if (advancementdataplayer != null) {
-            advancementdataplayer.b();
+        if (entityplayer.isAdvancementDataLoaded()) { // Papercut
+            advancementdataplayer.b(); // Papercut
         }
 
     }
@@ -545,7 +546,7 @@ public abstract class PlayerList {
 
         entityplayer.decouple();
         worldserver.removePlayer(entityplayer);
-        entityplayer.getAdvancementData().a();
+        if (entityplayer.isAdvancementDataLoaded()) entityplayer.getAdvancementData().a(); // Papercut
         this.players.remove(entityplayer);
         this.playersByName.remove(entityplayer.getName().toLowerCase(java.util.Locale.ROOT)); // Spigot
         this.server.getBossBattleCustomData().b(entityplayer);
@@ -1300,9 +1301,44 @@ public abstract class PlayerList {
         return serverstatisticmanager;
     }
 
+    // Paper startcut - Apply advancements async
+    public java.util.concurrent.CompletableFuture<AdvancementDataPlayer> applyPlayerAdvancementsAsync(EntityPlayer entityplayer) {
+        if (!us.minevict.papercut.PapercutConfig.applyAdvancementsAsync) {
+            return java.util.concurrent.CompletableFuture.completedFuture(f(entityplayer));
+        }
+        if (entityplayer.isAdvancementDataLoaded()) {
+            // We have nothing to load, so no reason to drag on the future for long.
+            AdvancementDataPlayer advancementdataplayer = entityplayer.getAdvancementData();
+            java.util.concurrent.CompletableFuture<AdvancementDataPlayer> future = java.util.concurrent.CompletableFuture.completedFuture(advancementdataplayer);
+            advancementdataplayer.setPlayer(entityplayer);
+            return future;
+        }
+
+        // This time we were not so lucky, and advancements have to be read from file.
+        // That is slow...
+        UUID uuid = entityplayer.getUniqueID();
+        File file = this.server.a(SavedFile.ADVANCEMENTS).toFile();
+        File file1 = new File(file, uuid + ".json");
+        java.util.concurrent.CompletableFuture<AdvancementDataPlayer> future = new java.util.concurrent.CompletableFuture<AdvancementDataPlayer>();
+        this.server.executorService.execute(() -> {
+            try {
+                AdvancementDataPlayer data = new AdvancementDataPlayer(this.server.getDataFixer(), this,
+                    this.server.getAdvancementData(), file1, entityplayer);
+                data.setPlayer(entityplayer);
+                // this.p.put(uuid, advancementdataplayer); // CraftBukkit
+                future.complete(data);
+            } catch (Throwable ex) {
+                future.completeExceptionally(ex);
+            }
+        });
+
+        return future;
+    }
+    // Papercut end
+
     public AdvancementDataPlayer f(EntityPlayer entityplayer) {
         UUID uuid = entityplayer.getUniqueID();
-        AdvancementDataPlayer advancementdataplayer = (AdvancementDataPlayer) entityplayer.getAdvancementData(); // CraftBukkit
+        AdvancementDataPlayer advancementdataplayer = entityplayer.isAdvancementDataLoaded() ? entityplayer.getAdvancementData() : null; // CraftBukkit // Papercut
 
         if (advancementdataplayer == null) {
             File file = this.server.a(SavedFile.ADVANCEMENTS).toFile();
@@ -1355,8 +1391,13 @@ public abstract class PlayerList {
         }*/
 
         for (EntityPlayer player : players) {
-            player.getAdvancementData().a(this.server.getAdvancementData());
-            player.getAdvancementData().b(player); // CraftBukkit - trigger immediate flush of advancements
+            // Papercut start - null check on AdvancementDataPlayer
+            AdvancementDataPlayer advancementDataPlayer = player.getAdvancementData();
+            if (advancementDataPlayer != null) {
+                advancementDataPlayer.a(this.server.getAdvancementData());
+                advancementDataPlayer.b(player); // CraftBukkit - trigger immediate flush of advancements // Paper
+            }
+            // Papercut end
         }
         // CraftBukkit end
 
