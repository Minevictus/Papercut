From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mariell Hoversholm <proximyst@proximyst.com>
Date: Sat, 27 Jun 2020 16:32:13 +0200
Subject: [PATCH] Redo item serialization

---
 .../craftbukkit/util/CraftMagicNumbers.java   | 47 +++++++++++++------
 1 file changed, 33 insertions(+), 14 deletions(-)

diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index f1e60981abc46807f8004f0ac49127a2bb83fc42..461cfb96f496aaf5caa12d8ae9847c8756b711e7 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -336,39 +336,58 @@ public final class CraftMagicNumbers implements UnsafeValues {
         Preconditions.checkNotNull(item, "null cannot be serialized");
         Preconditions.checkArgument(item.getType() != Material.AIR, "air cannot be serialized");
 
+        // Papercut start
+        return serializeNbtToBytes(
+            (item instanceof CraftItemStack ? ((CraftItemStack) item).getHandle() : CraftItemStack.asNMSCopy(item)).save(new NBTTagCompound()),
+            true
+        );
+    }
+
+    @Override
+    public ItemStack deserializeItem(byte[] data) {
+        NBTTagCompound compound = deserializeNbtFromBytes(data, true);
+        Dynamic<NBTBase> converted = DataConverterRegistry.getDataFixer().update(DataConverterTypes.ITEM_STACK, new Dynamic<NBTBase>(DynamicOpsNBT.a, compound), compound.getInt("DataVersion"), getDataVersion());
+        return CraftItemStack.asCraftMirror(net.minecraft.server.ItemStack.fromCompound((NBTTagCompound) converted.getValue()));
+    }
+
+    private byte[] serializeNbtToBytes(NBTTagCompound compound, boolean addDataVersion) {
+        if (addDataVersion) compound.setInt("DataVersion", getDataVersion());
+        // Papercut end
         java.io.ByteArrayOutputStream outputStream = new java.io.ByteArrayOutputStream();
-        NBTTagCompound compound = (item instanceof CraftItemStack ? ((CraftItemStack) item).getHandle() : CraftItemStack.asNMSCopy(item)).save(new NBTTagCompound());
-        compound.setInt("DataVersion", getDataVersion());
         try {
             net.minecraft.server.NBTCompressedStreamTools.writeNBT(
                 compound,
                 outputStream
             );
         } catch (IOException ex) {
-            throw new RuntimeException(ex);
+            com.destroystokyo.paper.util.SneakyThrow.sneaky(ex);
+            throw new RuntimeException();
         }
 
         return outputStream.toByteArray();
     }
 
-    @Override
-    public ItemStack deserializeItem(byte[] data) {
-        Preconditions.checkNotNull(data, "null cannot be deserialized");
-        Preconditions.checkArgument(data.length > 0, "cannot deserialize nothing");
-
+    // Papercut start
+    private NBTTagCompound deserializeNbtFromBytes(byte[] data, boolean verifyDataVersion) {
+        NBTTagCompound compound;
+        // Papercut end
         try {
-            NBTTagCompound compound = net.minecraft.server.NBTCompressedStreamTools.readNBT(
+            compound = net.minecraft.server.NBTCompressedStreamTools.readNBT( // Papercut
                 new java.io.ByteArrayInputStream(data)
             );
-            int dataVersion = compound.getInt("DataVersion");
-
-            Preconditions.checkArgument(dataVersion <= getDataVersion(), "Newer version! Server downgrades are not supported!");
-            Dynamic<NBTBase> converted = DataConverterRegistry.getDataFixer().update(DataConverterTypes.ITEM_STACK, new Dynamic<NBTBase>(DynamicOpsNBT.a, compound), dataVersion, getDataVersion());
-            return CraftItemStack.asCraftMirror(net.minecraft.server.ItemStack.fromCompound((NBTTagCompound) converted.getValue()));
+            // Papercut - move down
         } catch (IOException ex) {
             com.destroystokyo.paper.util.SneakyThrow.sneaky(ex);
             throw new RuntimeException();
         }
+
+        // Papercut start
+        if (!verifyDataVersion) return compound;
+
+        int dataVersion = compound.getInt("DataVersion");
+        Preconditions.checkArgument(dataVersion <= getDataVersion(), "Newer version! Server downgrades are not supported!");
+        return compound;
+        // Papercut end
     }
     // Paper end
 
