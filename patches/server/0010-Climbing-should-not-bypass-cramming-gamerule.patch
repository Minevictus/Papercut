From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: William Blake Galbreath <blake.galbreath@gmail.com>
Date: Sun, 21 Jun 2020 14:08:42 +0200
Subject: [PATCH] Climbing should not bypass cramming gamerule

Original patch: https://raw.githubusercontent.com/pl3xgaming/Purpur/master/patches/server/0053-Climbing-should-not-bypass-cramming-gamerule.patch
---
 src/main/java/net/minecraft/server/Entity.java         | 10 +++++++++-
 .../java/net/minecraft/server/EntityArmorStand.java    |  2 +-
 src/main/java/net/minecraft/server/EntityBat.java      |  2 +-
 src/main/java/net/minecraft/server/EntityBoat.java     |  2 +-
 .../java/net/minecraft/server/EntityHorseAbstract.java |  2 +-
 src/main/java/net/minecraft/server/EntityLiving.java   |  8 +++++---
 .../net/minecraft/server/EntityMinecartAbstract.java   |  2 +-
 src/main/java/net/minecraft/server/EntityParrot.java   |  4 ++--
 src/main/java/net/minecraft/server/EntityStrider.java  |  2 +-
 .../java/net/minecraft/server/IEntitySelector.java     |  8 +++++++-
 src/main/java/us/minevict/papercut/PapercutConfig.java |  5 +++++
 11 files changed, 34 insertions(+), 13 deletions(-)

diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 3db19a9bab8ffdc42f280a27c867bf7d1a1ab9e7..d04126a9b489ca42bfc49af9bdd27f406f89fd6f 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -1695,7 +1695,10 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         return false;
     }
 
-    public boolean isCollidable() {
+    // Papercut start
+    @Deprecated public boolean isCollidable() { return isCollidable(false); }
+    public boolean isCollidable(boolean ignoreClimbing) {
+        // Papercut end
         return false;
     }
 
@@ -1703,6 +1706,11 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     public boolean canCollideWith(Entity entity) {
         return isCollidable();
     }
+    // Papercut start
+    public boolean canCollideWith(Entity entity, boolean ignoreClimbing) {
+        return isCollidable(ignoreClimbing);
+    }
+    // Papercut end
     // CraftBukkit end
 
     public void runKillTrigger(Entity entity, int kills, DamageSource damageSource) { this.a(entity, kills, damageSource); } // Paper - OBFHELPER
diff --git a/src/main/java/net/minecraft/server/EntityArmorStand.java b/src/main/java/net/minecraft/server/EntityArmorStand.java
index 250bccee4a27801b41c50d59e93396c696ab6974..6fc0a85852bab65b8c92ce7c58f6525543ff7687 100644
--- a/src/main/java/net/minecraft/server/EntityArmorStand.java
+++ b/src/main/java/net/minecraft/server/EntityArmorStand.java
@@ -318,7 +318,7 @@ public class EntityArmorStand extends EntityLiving {
     }
 
     @Override
-    public boolean isCollidable() {
+    public boolean isCollidable(boolean ignoreClimbing) { // Papercut
         return false;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityBat.java b/src/main/java/net/minecraft/server/EntityBat.java
index 3dd3b8913e345471f971c4ef55bb91200eb50a33..3b270cbd7de54275d9025d7fb927168135f861fa 100644
--- a/src/main/java/net/minecraft/server/EntityBat.java
+++ b/src/main/java/net/minecraft/server/EntityBat.java
@@ -50,7 +50,7 @@ public class EntityBat extends EntityAmbient {
     }
 
     @Override
-    public boolean isCollidable() {
+    public boolean isCollidable(boolean ignoreClimbing) { // Papercut
         return false;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityBoat.java b/src/main/java/net/minecraft/server/EntityBoat.java
index 409e0ac0a2aaccda29f7cc146dbccdd45de80e9f..a44d8cd3f490dc83298e15c14a3f89199c9e09a5 100644
--- a/src/main/java/net/minecraft/server/EntityBoat.java
+++ b/src/main/java/net/minecraft/server/EntityBoat.java
@@ -104,7 +104,7 @@ public class EntityBoat extends Entity {
     }
 
     @Override
-    public boolean isCollidable() {
+    public boolean isCollidable(boolean ignoreClimbing) { // Papercut
         return true;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityHorseAbstract.java b/src/main/java/net/minecraft/server/EntityHorseAbstract.java
index 364697e0155012c300219ad94a3995809e6c2f8f..e933ee4b1737fb15e805195a64e25238ca975d9e 100644
--- a/src/main/java/net/minecraft/server/EntityHorseAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityHorseAbstract.java
@@ -165,7 +165,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
     }
 
     @Override
-    public boolean isCollidable() {
+    public boolean isCollidable(boolean ignoreClimbing) { // Papercut
         return !this.isVehicle();
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 4545bd371c460d360a65d80b31af7819d718c97a..ed87d5b573e7ab1275f5deceb3f00acdf2640e78 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -2837,7 +2837,7 @@ public abstract class EntityLiving extends Entity {
         // Paper - end don't run getEntities if we're not going to use its result
         // Tuinity start - reduce memory allocation from collideNearby
         List<Entity> list = com.tuinity.tuinity.util.CachedLists.getTempGetEntitiesList();
-        this.world.getEntities(this, this.getBoundingBox(), IEntitySelector.a(this), list);
+        this.world.getEntities(this, this.getBoundingBox(), IEntitySelector.pushable(this, world.papercutConfig.fixClimbingBypassingCrammingRule), list);
         try {
         // Tuinity end - reduce memory allocation from collideNearby
 
@@ -2981,8 +2981,10 @@ public abstract class EntityLiving extends Entity {
     }
 
     @Override
-    public boolean isCollidable() {
-        return this.isAlive() && !this.isClimbing() && this.collides; // CraftBukkit
+    // Papercut start
+    public boolean isCollidable(boolean ignoreClimbing) {
+        return this.isAlive() && (ignoreClimbing || !this.isClimbing()) && this.collides; // CraftBukkit
+        // Papercut end
     }
 
     // CraftBukkit start - collidable API
diff --git a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
index 6e038905ea6e5245190e5970481195ba668f3247..9083abbb4048c58817350ce05bdce73f4cb1c1ee 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
@@ -108,7 +108,7 @@ public abstract class EntityMinecartAbstract extends Entity {
     }
 
     @Override
-    public boolean isCollidable() {
+    public boolean isCollidable(boolean ignoreClimbing) { // Papercut
         return true;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityParrot.java b/src/main/java/net/minecraft/server/EntityParrot.java
index 2172fcefbc0d1c41cf2715a63015659a706e57ec..6a5a98bc47137ce5ee58ad4a2fdd874cc37cdbd0 100644
--- a/src/main/java/net/minecraft/server/EntityParrot.java
+++ b/src/main/java/net/minecraft/server/EntityParrot.java
@@ -314,8 +314,8 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
     }
 
     @Override
-    public boolean isCollidable() {
-        return super.isCollidable(); // CraftBukkit - collidable API
+    public boolean isCollidable(boolean ignoreClimbing) { // Papercut
+        return super.isCollidable(ignoreClimbing); // CraftBukkit - collidable API // Papercut
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/EntityStrider.java b/src/main/java/net/minecraft/server/EntityStrider.java
index c123e9fe97f1c0da0c6807e17df497a31749c1b3..afb0106f88a00f9306610d2cf582ffb36fd8b1bc 100644
--- a/src/main/java/net/minecraft/server/EntityStrider.java
+++ b/src/main/java/net/minecraft/server/EntityStrider.java
@@ -120,7 +120,7 @@ public class EntityStrider extends EntityAnimal implements ISteerable, ISaddleab
     }
 
     @Override
-    public boolean isCollidable() {
+    public boolean isCollidable(boolean ignoreClimbable) { // Papercut
         return true;
     }
 
diff --git a/src/main/java/net/minecraft/server/IEntitySelector.java b/src/main/java/net/minecraft/server/IEntitySelector.java
index a52dd0c021e264a57a62bde27ea9d2a6a97e2335..2c766b09ff39540950546ad0b63d74ba4dad7ac7 100644
--- a/src/main/java/net/minecraft/server/IEntitySelector.java
+++ b/src/main/java/net/minecraft/server/IEntitySelector.java
@@ -43,11 +43,17 @@ public final class IEntitySelector {
     }
 
     public static Predicate<Entity> a(Entity entity) {
+        // Papercut start
+        return pushable(entity, false);
+    }
+
+    public static Predicate<Entity> pushable(Entity entity, boolean ignoreClimbing) {
+        // Papercut end
         ScoreboardTeamBase scoreboardteambase = entity.getScoreboardTeam();
         ScoreboardTeamBase.EnumTeamPush scoreboardteambase_enumteampush = scoreboardteambase == null ? ScoreboardTeamBase.EnumTeamPush.ALWAYS : scoreboardteambase.getCollisionRule();
 
         return (Predicate) (scoreboardteambase_enumteampush == ScoreboardTeamBase.EnumTeamPush.NEVER ? Predicates.alwaysFalse() : IEntitySelector.g.and((entity1) -> {
-            if (!entity1.canCollideWith(entity) || !entity.canCollideWith(entity1)) { // CraftBukkit - collidable API
+            if (!entity1.canCollideWith(entity, ignoreClimbing) || !entity.canCollideWith(entity1, ignoreClimbing)) { // CraftBukkit - collidable API // Papercut - ignore climbing
                 return false;
             } else if (entity.world.isClientSide && (!(entity1 instanceof EntityHuman) || !((EntityHuman) entity1).ey())) {
                 return false;
diff --git a/src/main/java/us/minevict/papercut/PapercutConfig.java b/src/main/java/us/minevict/papercut/PapercutConfig.java
index 473063016bf4b30e40e2c0bd26a8c4555834df85..a76f1620ac92d3f09a4bcf00846ea94d79787cb6 100644
--- a/src/main/java/us/minevict/papercut/PapercutConfig.java
+++ b/src/main/java/us/minevict/papercut/PapercutConfig.java
@@ -215,5 +215,10 @@ public final class PapercutConfig {
       }
       return this.config.getDouble(path, this.worldDefaults.getDouble(path));
     }
+
+    public boolean fixClimbingBypassingCrammingRule = true;
+    private void fixClimbingBypassingCrammingRule() {
+      fixClimbingBypassingCrammingRule = getBoolean("fix-climbing-bypassing-cramming-rule", fixClimbingBypassingCrammingRule);
+    }
   }
 }
