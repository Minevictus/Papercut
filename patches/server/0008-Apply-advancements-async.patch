From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mariell Hoversholm <proximyst@proximyst.com>
Date: Tue, 26 May 2020 22:20:23 +0200
Subject: [PATCH] Apply advancements async

---
 .../server/AdvancementDataPlayer.java         |  1 +
 .../net/minecraft/server/EntityPlayer.java    |  9 ++--
 .../minecraft/server/PlayerConnection.java    |  5 ++-
 .../java/net/minecraft/server/PlayerList.java | 45 ++++++++++++++++---
 .../advancement/CraftAdvancementProgress.java |  2 +
 .../craftbukkit/entity/CraftPlayer.java       |  1 -
 6 files changed, 50 insertions(+), 13 deletions(-)

diff --git a/src/main/java/net/minecraft/server/AdvancementDataPlayer.java b/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
index 57b9d13447a4f7804827c1bd41121c3069c696bd..511e704d63bd7f66d8c6119053d57d57ea8d1cbc 100644
--- a/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
+++ b/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
@@ -59,6 +59,7 @@ public class AdvancementDataPlayer {
         this.d(advancementdataworld);
     }
 
+    public void setPlayer(EntityPlayer entityplayer) { a(entityplayer); } // Paper - OBFHELPER
     public void a(EntityPlayer entityplayer) {
         this.player = entityplayer;
     }
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index d5740a25bb487fc186333e908968c6a23a9b5005..f529b9fc50ec05007c5556f9f410def4cf9de985 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -47,7 +47,6 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     public final MinecraftServer server;
     public final PlayerInteractManager playerInteractManager;
     public final Deque<Integer> removeQueue = new ArrayDeque<>(); // Paper
-    private final AdvancementDataPlayer advancementDataPlayer;
     private final ServerStatisticManager serverStatisticManager;
     private float lastHealthScored = Float.MIN_VALUE;
     private int lastFoodScored = Integer.MIN_VALUE;
@@ -130,7 +129,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         this.playerInteractManager = playerinteractmanager;
         this.server = minecraftserver;
         this.serverStatisticManager = minecraftserver.getPlayerList().getStatisticManager(this);
-        this.advancementDataPlayer = minecraftserver.getPlayerList().f(this);
+//        this.advancementDataPlayer = minecraftserver.getPlayerList().f(this); // Papercut
         this.G = 1.0F;
         //this.b(worldserver); // Paper - don't move to spawn on login, only first join
 
@@ -497,7 +496,8 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             CriterionTriggers.u.a(this, this.cm, this.ticksLived - this.cn);
         }
 
-        this.advancementDataPlayer.b(this);
+        if (isAdvancementDataLoaded()) // Paper - async advancement loading
+            getAdvancementData().b(this); // Paper - async advancement loading
     }
 
     public void playerTick() {
@@ -1889,8 +1889,9 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     }
 
     public AdvancementDataPlayer getAdvancementData() {
-        return this.advancementDataPlayer;
+        return this.playerConnection.advancementDataPlayer.join();
     }
+    public boolean isAdvancementDataLoaded() { return this.playerConnection != null && this.playerConnection.advancementDataPlayer != null && this.playerConnection.advancementDataPlayer.isDone(); } // Paper - async advancements loading
 
     // CraftBukkit start
     public void a(WorldServer worldserver, double d0, double d1, double d2, float f, float f1) {
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 3481991870c1237ed207654a41827791c8017717..b0a0ecb023bc9a0b32c4336d00357a0c702e8893 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -106,6 +106,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
     private int processedMovePackets;
     private static final int MAX_SIGN_LINE_LENGTH = Integer.getInteger("Paper.maxSignLength", 80);
     private static final long KEEPALIVE_LIMIT = Long.getLong("paper.playerconnection.keepalive", 30) * 1000; // Paper - provide property to set keepalive limit
+    java.util.concurrent.CompletableFuture<AdvancementDataPlayer> advancementDataPlayer = null; // Paper - async player advancements loading
 
     public PlayerConnection(MinecraftServer minecraftserver, NetworkManager networkmanager, EntityPlayer entityplayer) {
         this.minecraftServer = minecraftserver;
@@ -540,8 +541,8 @@ public class PlayerConnection implements PacketListenerPlayIn {
             MinecraftKey minecraftkey = packetplayinadvancements.d();
             Advancement advancement = this.minecraftServer.getAdvancementData().a(minecraftkey);
 
-            if (advancement != null) {
-                this.player.getAdvancementData().a(advancement);
+            if (advancement != null && this.player.isAdvancementDataLoaded()) { // Paper - async advancements
+                player.getAdvancementData().a(advancement); // Paper
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index ea744e2fdf7a256d9f04786a670c44e8b517f281..82cbdd5c14a4082845b7139507414bdec4555e02 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -172,6 +172,7 @@ public abstract class PlayerList {
 
         this.a(entityplayer, (EntityPlayer) null, worldserver1);
         PlayerConnection playerconnection = new PlayerConnection(this.server, networkmanager, entityplayer);
+        playerconnection.advancementDataPlayer = applyPlayerAdvancementsAsync(entityplayer); // Paper - async advancements loading
         GameRules gamerules = worldserver1.getGameRules();
         boolean flag = gamerules.getBoolean(GameRules.DO_IMMEDIATE_RESPAWN);
         boolean flag1 = gamerules.getBoolean(GameRules.REDUCED_DEBUG_INFO);
@@ -484,8 +485,8 @@ public abstract class PlayerList {
 
         AdvancementDataPlayer advancementdataplayer = (AdvancementDataPlayer) entityplayer.getAdvancementData(); // CraftBukkit
 
-        if (advancementdataplayer != null) {
-            advancementdataplayer.b();
+        if (entityplayer.isAdvancementDataLoaded()) { // Papercut
+            advancementdataplayer.b(); // Papercut
         }
 
     }
@@ -538,7 +539,7 @@ public abstract class PlayerList {
 
         entityplayer.decouple();
         worldserver.removePlayer(entityplayer);
-        entityplayer.getAdvancementData().a();
+        if (entityplayer.isAdvancementDataLoaded()) entityplayer.getAdvancementData().a(); // Paper
         this.players.remove(entityplayer);
         this.playersByName.remove(entityplayer.getName().toLowerCase(java.util.Locale.ROOT)); // Spigot
         this.server.getBossBattleCustomData().b(entityplayer);
@@ -1293,9 +1294,36 @@ public abstract class PlayerList {
         return serverstatisticmanager;
     }
 
+    // Paper start - Apply advancements async
+    public java.util.concurrent.CompletableFuture<AdvancementDataPlayer> applyPlayerAdvancementsAsync(EntityPlayer entityplayer) {
+        if (entityplayer.isAdvancementDataLoaded()) {
+            // We have nothing to load, so no reason to drag on the future for long.
+            AdvancementDataPlayer advancementdataplayer = entityplayer.getAdvancementData();
+            java.util.concurrent.CompletableFuture<AdvancementDataPlayer> future = java.util.concurrent.CompletableFuture.completedFuture(advancementdataplayer);
+            advancementdataplayer.setPlayer(entityplayer);
+            return future;
+        }
+
+        // This time we were not so lucky, and advancements have to be read from file.
+        // That is slow...
+        UUID uuid = entityplayer.getUniqueID();
+        File file = this.server.a(SavedFile.ADVANCEMENTS).toFile();
+        File file1 = new File(file, uuid + ".json");
+        java.util.concurrent.CompletableFuture<AdvancementDataPlayer> future = new java.util.concurrent.CompletableFuture<AdvancementDataPlayer>();
+        this.server.execute(() -> {
+            AdvancementDataPlayer data = new AdvancementDataPlayer(this.server.getDataFixer(), this, this.server.getAdvancementData(), file1, entityplayer);
+            data.setPlayer(entityplayer);
+            // this.p.put(uuid, advancementdataplayer); // CraftBukkit
+            future.complete(data);
+        });
+
+        return future;
+    }
+    // Paper end
+
     public AdvancementDataPlayer f(EntityPlayer entityplayer) {
         UUID uuid = entityplayer.getUniqueID();
-        AdvancementDataPlayer advancementdataplayer = (AdvancementDataPlayer) entityplayer.getAdvancementData(); // CraftBukkit
+        AdvancementDataPlayer advancementdataplayer = entityplayer.isAdvancementDataLoaded() ? entityplayer.getAdvancementData() : null; // CraftBukkit // Paper
 
         if (advancementdataplayer == null) {
             File file = this.server.a(SavedFile.ADVANCEMENTS).toFile();
@@ -1348,8 +1376,13 @@ public abstract class PlayerList {
         }*/
 
         for (EntityPlayer player : players) {
-            player.getAdvancementData().a(this.server.getAdvancementData());
-            player.getAdvancementData().b(player); // CraftBukkit - trigger immediate flush of advancements
+            // Papercut start - null check on AdvancementDataPlayer
+            AdvancementDataPlayer advancementDataPlayer = player.getAdvancementData();
+            if (advancementDataPlayer != null) {
+                advancementDataPlayer.a(this.server.getAdvancementData());
+                advancementDataPlayer.b(player); // CraftBukkit - trigger immediate flush of advancements // Paper
+            }
+            // Papercut end
         }
         // CraftBukkit end
 
diff --git a/src/main/java/org/bukkit/craftbukkit/advancement/CraftAdvancementProgress.java b/src/main/java/org/bukkit/craftbukkit/advancement/CraftAdvancementProgress.java
index 60fc5aff80697cb4c85080350542c0f46056f74a..304362b4c3f2edc87478201cc73cb857e43f567b 100644
--- a/src/main/java/org/bukkit/craftbukkit/advancement/CraftAdvancementProgress.java
+++ b/src/main/java/org/bukkit/craftbukkit/advancement/CraftAdvancementProgress.java
@@ -33,11 +33,13 @@ public class CraftAdvancementProgress implements AdvancementProgress {
 
     @Override
     public boolean awardCriteria(String criteria) {
+        if (playerData == null) return false; // Paper - null check
         return playerData.grantCriteria(advancement.getHandle(), criteria);
     }
 
     @Override
     public boolean revokeCriteria(String criteria) {
+        if (playerData == null) return false; // Paper - null check
         return playerData.revokeCritera(advancement.getHandle(), criteria);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 97657637ab0d1cfb6801b8dd7f6ef21df3105fab..c7b99224e42f5ce5b05d02e7e5d8fc735c2d4f8c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1927,7 +1927,6 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         CraftAdvancement craft = (CraftAdvancement) advancement;
         AdvancementDataPlayer data = getHandle().getAdvancementData();
         AdvancementProgress progress = data.getProgress(craft.getHandle());
-
         return new CraftAdvancementProgress(craft, data, progress);
     }
 
