From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mariell Hoversholm <proximyst@proximyst.com>
Date: Sun, 3 May 2020 13:31:01 -0300
Subject: [PATCH] Add EntityTeleportHinderedEvent


diff --git a/src/main/java/us/minevict/papercut/event/entity/EntityTeleportHinderedEvent.java b/src/main/java/us/minevict/papercut/event/entity/EntityTeleportHinderedEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..eed504e6812a91cc691e64bfbfb4921f83633ed2
--- /dev/null
+++ b/src/main/java/us/minevict/papercut/event/entity/EntityTeleportHinderedEvent.java
@@ -0,0 +1,121 @@
+package us.minevict.papercut.event.entity;
+        
+import org.bukkit.entity.Entity;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.entity.EntityEvent;
+import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * Fired when an entity is hindered from teleporting.
+ */
+public class EntityTeleportHinderedEvent extends EntityEvent {
+  private static final HandlerList handlers = new HandlerList();
+
+  @NotNull
+  private final Reason reason;
+  @Nullable
+  private final TeleportCause teleportCause;
+  private boolean retry = false;
+
+  public EntityTeleportHinderedEvent(@NotNull Entity entity, @NotNull Reason reason,
+      @Nullable TeleportCause teleportCause) {
+    super(entity);
+    this.reason = reason;
+    this.teleportCause = teleportCause;
+  }
+
+  /**
+    * Return the reason for the hindrance.
+    *
+    * @return why the teleport was hindered.
+    */
+  @NotNull
+  public Reason getReason() {
+    return reason;
+  }
+
+  /**
+    * Return the cause of the teleport in the first place.
+    *
+    * @return why the teleport occurred if cause was given, otherwise null.
+    */
+  @Nullable
+  public TeleportCause getTeleportCause() {
+    return teleportCause;
+  }
+
+  /**
+    * Whether the teleport should be retried.
+    * <p>
+    * Note that this can put the server in a never-ending loop of trying to
+    * teleport someone resulting in a stack overflow. Do not retry more than
+    * necessary.
+    * </p>
+    *
+    * @return whether the teleport should be retried.
+    */
+  public boolean shouldRetry() {
+    return retry;
+  }
+
+  /**
+    * Sets whether the teleport should be retried.
+    * <p>
+    * Note that this can put the server in a never-ending loop of trying to
+    * teleport someone resulting in a stack overflow. Do not retry more than
+    * necessary.
+    * </p>
+    *
+    * @param retry whether the teleport should be retried.
+    */
+  public void setShouldRetry(boolean retry) {
+    this.retry = retry;
+  }
+
+  /**
+    * Calls the event and tests if should retry.
+    *
+    * @return whether the teleport should be retried.
+    */
+  @Override
+  public boolean callEvent() {
+    super.callEvent();
+    return shouldRetry();
+  }
+
+  @Override
+  @NotNull
+  public HandlerList getHandlers() {
+    return handlers;
+  }
+
+  @NotNull
+  public static HandlerList getHandlerList() {
+    return handlers;
+  }
+
+  /**
+    * Reason for hindrance in teleports.
+    */
+  public enum Reason {
+    /**
+      * The teleported entity is a passenger of another entity.
+      */
+    IS_PASSENGER,
+
+    /**
+      * The teleported entity has passengers.
+      */
+    IS_VEHICLE,
+
+    /**
+      * The teleport event was cancelled.
+      * <p>
+      * This is only caused by players teleporting.
+      * </p>
+      */
+    EVENT_CANCELLED,
+  }
+} 
\ No newline at end of file
