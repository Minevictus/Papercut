From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nahuel <nahueldolores@hotmail.com>
Date: Tue, 28 Apr 2020 13:52:06 -0300
Subject: [PATCH] Add StructureGenerateEvent

---
 .../event/world/StructureGenerateEvent.java   | 67 +++++++++++++++++++
 1 file changed, 67 insertions(+)
 create mode 100644 src/main/java/com/destroystokyo/paper/event/world/StructureGenerateEvent.java

diff --git a/src/main/java/com/destroystokyo/paper/event/world/StructureGenerateEvent.java b/src/main/java/com/destroystokyo/paper/event/world/StructureGenerateEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..f32986eade209a120e8423b1ecda413ac6f37156
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/event/world/StructureGenerateEvent.java
@@ -0,0 +1,67 @@
+package com.destroystokyo.paper.event.world;
+
+import com.google.common.base.Preconditions;
+import org.bukkit.Bukkit;
+import org.bukkit.StructureType;
+import org.bukkit.World;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.Event;
+import org.bukkit.event.HandlerList;
+import org.jetbrains.annotations.NotNull;
+
+public class StructureGenerateEvent extends Event implements Cancellable {
+    private static final HandlerList handlers = new HandlerList();
+
+    private final World world;
+    private final StructureType structureType;
+    private final int chunkX;
+    private final int chunkZ;
+
+    private boolean cancel = false;
+
+    public StructureGenerateEvent(@NotNull World world, @NotNull StructureType structureType, int chunkX, int chunkZ) {
+        super(Bukkit.isPrimaryThread()); // Structure generation is not necessarily on the main thread as of 1.16.
+        this.world = Preconditions.checkNotNull(world, "world");
+        this.structureType = Preconditions.checkNotNull(structureType, "structureType");
+        this.chunkX = chunkX;
+        this.chunkZ = chunkZ;
+    }
+
+    @NotNull
+    public World getWorld() {
+        return world;
+    }
+
+    @NotNull
+    public StructureType getStructureType() {
+        return structureType;
+    }
+
+    public int getChunkX() {
+        return chunkX;
+    }
+
+    public int getChunkZ() {
+        return chunkZ;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancel = cancel;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancel;
+    }
+
+    @Override
+    public @NotNull HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
